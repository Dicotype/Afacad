# automatic
@Uppercase = [A Aacute Abreve Abreveacute Abrevedotbelow Abrevegrave Abrevehookabove Abrevetilde Acircumflex Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhookabove Acircumflextilde Adblgrave Adieresis Adotbelow Agrave Ahookabove Ainvertedbreve Amacron Aogonek Aring Aringacute Atilde AE AEacute B C Cacute Ccaron Ccedilla Ccircumflex Cdotaccent D DZcaron Eth Dcaron Dcroat Dzcaron E Eacute Ebreve Ecaron Ecircumflex Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhookabove Ecircumflextilde Edblgrave Edieresis Edotaccent Edotbelow Egrave Ehookabove Einvertedbreve Emacron Eogonek Etilde Schwa Ezh Ezhcaron F G Gbreve Gcaron Gcircumflex Gcommaaccent Gdotaccent Gstroke H Hbar Hcircumflex I IJ Iacute Ibreve Icircumflex Idblgrave Idieresis Idotaccent Idotbelow Igrave Ihookabove Iinvertedbreve Imacron Iogonek Itilde J Jacute Jcircumflex K Kcaron Kcommaaccent L LJ Lacute Lcaron Lcommaaccent Ldot Lj Lslash M N NJ Nacute Ncaron Ncommaaccent Nj Ntilde Eng O Oacute Obreve Ocircumflex Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhookabove Ocircumflextilde Odblgrave Odieresis Odieresismacron Odotaccentmacron Odotbelow Ograve Ohookabove Ohorn Ohornacute Ohorndotbelow Ohorngrave Ohornhookabove Ohorntilde Ohungarumlaut Oinvertedbreve Omacron Oogonek Oslash Oslashacute Otilde Otildemacron OE P Thorn Q R Racute Rcaron Rcommaaccent Rdblgrave Rinvertedbreve S Sacute Scaron Scedilla Scircumflex Scommaaccent Germandbls T Tbar Tcaron Tcedilla Tcommaaccent U Uacute Ubreve Ucircumflex Udblgrave Udieresis Udotbelow Ugrave Uhookabove Uhorn Uhornacute Uhorndotbelow Uhorngrave Uhornhookabove Uhorntilde Uhungarumlaut Uinvertedbreve Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ydotbelow Ygrave Yhookabove Ymacron Ytilde Z Zacute Zcaron Zdotaccent];
@Numerals = [zero one two three four five six seven eight nine dek el zero.lf zero.lf.ss01 one.lf two.lf three.lf four.lf five.lf six.lf seven.lf eight.lf nine.lf dek.lf el.lf];
# Prefix: Languagesystems
# automatic
languagesystem DFLT dflt;
languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn CAT;
languagesystem latn NLD;
feature aalt {
    # automatic
    feature locl;
    feature subs;
    feature sinf;
    feature sups;
    feature numr;
    feature dnom;
    feature frac;
    feature ordn;
    feature pnum;
    feature tnum;
    feature case;
    feature titl;
    feature calt;
    feature ss01;
    feature ss03;
    feature ss02;
} aalt;

feature ccmp {
    # automatic
    lookup ccmp_Other_1 {
        @CombiningTopAccents = [acutecomb brevecomb breveinvertedcomb caroncomb circumflexcomb commaturnedabovecomb dblgravecomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
        @CombiningNonTopAccents = [brevebelowcomb cedillacomb dieresisbelowcomb dotbelowcomb macronbelowcomb ogonekcomb horncomb strokelongcomb strokeshortcomb];
        sub [i j]' @CombiningTopAccents by [idotless jdotless];
        sub [i j]' @CombiningNonTopAccents @CombiningTopAccents by [idotless jdotless];
        @Markscomb = [dieresiscomb dotaccentcomb gravecomb acutecomb ringcomb ringcomb_acutecomb tildecomb hookabovecomb strokeshortcomb];
        @MarkscombCase = [dieresiscomb.case dotaccentcomb.case gravecomb.case acutecomb.case ringcomb.case ringcomb_acutecomb.case tildecomb.case hookabovecomb.case strokeshortcomb.case];
        sub @Markscomb @Markscomb' by @MarkscombCase;
        sub @Uppercase @Markscomb' by @MarkscombCase;
    } ccmp_Other_1;

    lookup ccmp_Other_2 {
        sub @Markscomb' @MarkscombCase by @MarkscombCase;
        sub @MarkscombCase @Markscomb' by @MarkscombCase;
    } ccmp_Other_2;

    lookup ccmp_Other_3 {
        lookupflag 0;
        sub dieresiscomb macroncomb by dieresiscomb_macroncomb;
        sub dotaccentcomb macroncomb by dotaccentcomb_macroncomb;
        sub ringcomb acutecomb by ringcomb_acutecomb;
        sub tildecomb macroncomb by tildecomb_macroncomb;
    } ccmp_Other_3;

    lookup ccmp_latn_1 {
        sub fi by f i;
        sub fl by f l;
        sub lj by l j;
        sub Lj by L j;
        sub LJ by L J;
        sub nj by n j;
        sub Nj by N j;
        sub NJ by N J;
        sub dzcaron by d zcaron;
        sub Dzcaron by D zcaron;
        sub DZcaron by D Zcaron;
    } ccmp_latn_1;

    lookup ccmp_latn_2 {
        lookupflag 0;
        sub brevecomb acutecomb by brevecomb_acutecomb;
        sub brevecomb gravecomb by brevecomb_gravecomb;
        sub brevecomb hookabovecomb by brevecomb_hookabovecomb;
        sub brevecomb tildecomb by brevecomb_tildecomb;
        sub circumflexcomb acutecomb by circumflexcomb_acutecomb;
        sub circumflexcomb gravecomb by circumflexcomb_gravecomb;
        sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;
        sub circumflexcomb tildecomb by circumflexcomb_tildecomb;
    } ccmp_latn_2;

    script latn;
    lookup ccmp_latn_1;
    lookup ccmp_latn_2;
} ccmp;

feature locl {
    # automatic
    lookup locl_latn_0 {
        script latn;
        language AZE;
        sub i by idotaccent;
        language CRT;
        sub i by idotaccent;
        language KAZ;
        sub i by idotaccent;
        language TAT;
        sub i by idotaccent;
        language TRK;
        sub i by idotaccent;
    } locl_latn_0;

    lookup locl_latn_1 {
        script latn;
        language ROM;
        sub Scedilla by Scommaaccent;
        sub scedilla by scommaaccent;
        sub Tcedilla by Tcommaaccent;
        sub tcedilla by tcommaaccent;
        language MOL;
        sub Scedilla by Scommaaccent;
        sub scedilla by scommaaccent;
        sub Tcedilla by Tcommaaccent;
        sub tcedilla by tcommaaccent;
    } locl_latn_1;

    lookup locl_latn_2 {
        script latn;
        language CAT;
        sub l periodcentered' l by periodcentered.loclCAT;
        sub L periodcentered' L by periodcentered.loclCAT;
    } locl_latn_2;

    lookup locl_latn_3 {
        script latn;
        language NLD;
        sub iacute j' by jacute;
        sub Iacute J' by Jacute;
    } locl_latn_3;

} locl;

feature subs {
    # automatic
    sub zero by zeroinferior;
    sub one by oneinferior;
    sub two by twoinferior;
    sub three by threeinferior;
    sub four by fourinferior;
    sub five by fiveinferior;
    sub six by sixinferior;
    sub seven by seveninferior;
    sub eight by eightinferior;
    sub nine by nineinferior;
    sub dek by dekinferior;
    sub el by elinferior;
} subs;

feature sinf {
    # automatic
    sub zero by zeroinferior;
    sub one by oneinferior;
    sub two by twoinferior;
    sub three by threeinferior;
    sub four by fourinferior;
    sub five by fiveinferior;
    sub six by sixinferior;
    sub seven by seveninferior;
    sub eight by eightinferior;
    sub nine by nineinferior;
    sub dek by dekinferior;
    sub el by elinferior;
} sinf;

feature sups {
    # automatic
    sub zero by zerosuperior;
    sub one by onesuperior;
    sub two by twosuperior;
    sub three by threesuperior;
    sub four by foursuperior;
    sub five by fivesuperior;
    sub six by sixsuperior;
    sub seven by sevensuperior;
    sub eight by eightsuperior;
    sub nine by ninesuperior;
    sub dek by deksuperior;
    sub el by elsuperior;
} sups;

feature numr {
    # automatic
    sub zero by zero.numr;
    sub one by one.numr;
    sub two by two.numr;
    sub three by three.numr;
    sub four by four.numr;
    sub five by five.numr;
    sub six by six.numr;
    sub seven by seven.numr;
    sub eight by eight.numr;
    sub nine by nine.numr;
    sub dek by dek.numr;
    sub el by el.numr;
} numr;

feature dnom {
    # automatic
    sub zero by zero.dnom;
    sub one by one.dnom;
    sub two by two.dnom;
    sub three by three.dnom;
    sub four by four.dnom;
    sub five by five.dnom;
    sub six by six.dnom;
    sub seven by seven.dnom;
    sub eight by eight.dnom;
    sub nine by nine.dnom;
    sub dek by dek.dnom;
    sub el by el.dnom;
} dnom;

feature frac {
    # automatic
    lookup FRAC {
        sub slash by fraction;
    } FRAC;

    lookup UP {
        sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
    } UP;

    lookup DOWN {
        sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
        sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
    } DOWN;

} frac;

feature ordn {
    # automatic
    sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
    sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
    sub N o period by numero;
} ordn;

feature pnum {
    # automatic
    sub zero by zero.lf;
    sub one by one.lf;
    sub two by two.lf;
    sub three by three.lf;
    sub four by four.lf;
    sub five by five.lf;
    sub six by six.lf;
    sub seven by seven.lf;
    sub eight by eight.lf;
    sub nine by nine.lf;
    sub dek by dek.lf;
    sub el by el.lf;
    sub registered by registered.lf;
} pnum;

feature tnum {
    # automatic
    sub zero.lf by zero;
    sub one.lf by one;
    sub two.lf by two;
    sub three.lf by three;
    sub four.lf by four;
    sub five.lf by five;
    sub six.lf by six;
    sub seven.lf by seven;
    sub eight.lf by eight;
    sub nine.lf by nine;
    sub dek.lf by dek;
    sub el.lf by el;
    sub registered.lf by registered;
} tnum;

feature case {
    # automatic
    sub colon by colon.case;
    sub semicolon by semicolon.case;
    sub hyphen by hyphen.case;
    sub softhyphen by softhyphen.case;
    sub endash by endash.case;
    sub emdash by emdash.case;
    sub hyphentwo by hyphentwo.case;
    sub hyphen.titl by hyphen.titl.case;
    sub softhyphen.titl by softhyphen.titl.case;
    sub endash.titl by endash.titl.case;
    sub emdash.titl by emdash.titl.case;
    sub guillemetleft by guillemetleft.case;
    sub guillemetright by guillemetright.case;
    sub guilsinglleft by guilsinglleft.case;
    sub guilsinglright by guilsinglright.case;
    sub dieresiscomb by dieresiscomb.case;
    sub dotaccentcomb by dotaccentcomb.case;
    sub gravecomb by gravecomb.case;
    sub acutecomb by acutecomb.case;
    sub ringcomb by ringcomb.case;
    sub ringcomb_acutecomb by ringcomb_acutecomb.case;
    sub tildecomb by tildecomb.case;
    sub hookabovecomb by hookabovecomb.case;
    sub strokeshortcomb by strokeshortcomb.case;
} case;

feature dlig {
    # automatic
    lookupflag IgnoreMarks;
    sub t t by t_t;
} dlig;

feature liga {
    # automatic
    lookupflag IgnoreMarks;
    sub f f i by f_f_i;
    sub f f l by f_f_l;
    sub f f by f_f;
    sub f i by fi;
    sub f l by fl;
} liga;

feature titl {
    # automatic
    sub fraction by fraction.titl;
    sub onehalf by onehalf.titl;
    sub onethird by onethird.titl;
    sub onequarter by onequarter.titl;
    sub threequarters by threequarters.titl;
    sub oneeighth by oneeighth.titl;
    sub threeeighths by threeeighths.titl;
    sub fiveeighths by fiveeighths.titl;
    sub seveneighths by seveneighths.titl;
    sub slash by slash.titl;
    sub backslash by backslash.titl;
    sub hyphen by hyphen.titl;
    sub softhyphen by softhyphen.titl;
    sub endash by endash.titl;
    sub emdash by emdash.titl;
    sub underscore by underscore.titl;
    sub parenleft by parenleft.titl;
    sub parenright by parenright.titl;
    sub braceleft by braceleft.titl;
    sub braceright by braceright.titl;
    sub bracketleft by bracketleft.titl;
    sub bracketright by bracketright.titl;
    sub careof by careof.titl;
    sub bar by bar.titl;
    sub brokenbar by brokenbar.titl;
    sub plus by plus.titl;
    sub minus by minus.titl;
    sub multiply by multiply.titl;
    sub equal by equal.titl;
    sub greater by greater.titl;
    sub less by less.titl;
    sub percent by percent.titl;
    sub perthousand by perthousand.titl;
} titl;

feature calt {
    sub @Uppercase [colon semicolon hyphen softhyphen endash emdash hyphentwo guillemetleft guillemetright guilsinglleft guilsinglright]' @Uppercase by [colon.case semicolon.case hyphen.case softhyphen.case endash.case emdash.case hyphentwo.case guillemetleft.case guillemetright.case guilsinglleft.case guilsinglright.case];
    sub @Numerals [colon semicolon hyphen softhyphen endash emdash hyphentwo guillemetleft guillemetright guilsinglleft guilsinglright]' @Numerals by [colon.case semicolon.case hyphen.case softhyphen.case endash.case emdash.case hyphentwo.case guillemetleft.case guillemetright.case guilsinglleft.case guilsinglright.case];
    sub c [slash slash.titl fraction fraction.titl] o by careof;
} calt;

feature ss01 {
        featureNames {
        name "Alternative round zero";
    };

    # automatic
    sub zero.lf by zero.lf.ss01;
} ss01;

feature ss02 {
        featureNames {
        name "Alternative lowercase a";
    };

    # automatic
    sub a by a.ss02;
    sub aacute by aacute.ss02;
    sub abreve by abreve.ss02;
    sub abreveacute by abreveacute.ss02;
    sub abrevedotbelow by abrevedotbelow.ss02;
    sub abrevegrave by abrevegrave.ss02;
    sub abrevehookabove by abrevehookabove.ss02;
    sub abrevetilde by abrevetilde.ss02;
    sub acircumflex by acircumflex.ss02;
    sub acircumflexacute by acircumflexacute.ss02;
    sub acircumflexdotbelow by acircumflexdotbelow.ss02;
    sub acircumflexgrave by acircumflexgrave.ss02;
    sub acircumflexhookabove by acircumflexhookabove.ss02;
    sub acircumflextilde by acircumflextilde.ss02;
    sub adblgrave by adblgrave.ss02;
    sub adieresis by adieresis.ss02;
    sub adotbelow by adotbelow.ss02;
    sub agrave by agrave.ss02;
    sub ahookabove by ahookabove.ss02;
    sub ainvertedbreve by ainvertedbreve.ss02;
    sub amacron by amacron.ss02;
    sub aogonek by aogonek.ss02;
    sub aring by aring.ss02;
    sub aringacute by aringacute.ss02;
    sub atilde by atilde.ss02;
} ss02;

feature ss03 {
        featureNames {
        name "Alternative lowercase l";
    };

    # automatic
    sub l by l.ss03;
    sub lacute by lacute.ss03;
    sub lcaron by lcaron.ss03;
    sub lcommaaccent by lcommaaccent.ss03;
    sub ldot by ldot.ss03;
    sub lslash by lslash.ss03;
} ss03;
